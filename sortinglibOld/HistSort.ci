module HistSort{
  include "defs.h";
  initnode void register_sum_uint64_t(void);
  
  template <class key, class value> chare Main {
    entry Main(int _num_buckets);
    entry void Exit();
    entry void DataReady();
    entry void init_isum(CkReductionMsg*);
    entry void final_isum(CkReductionMsg*);
    entry void init_dsum(CkReductionMsg*);
    entry void final_dsum(CkReductionMsg*);
  };


  template <class key, class value>
    message first_probe {
      key splitter_guesses[];
    };

  template <class key>
    message next_probe {
      key splitter_guesses[];
      charm_resolved_range<key> send_info[];
    };

  template <class key, class value>
    message data_msg {
      kv_pair<key, value> pairs[];
    };
  
  template <class key, class value> chare Sorter {
    entry Sorter();
    entry Sorter(const CkArrayID &bucketArr, int num_chares, key min, key max);
    entry Sorter(const CkArrayID &bucketArr, int num_chares, key min, key max, tuning_params par);
    entry void Begin();
    entry void Begin(tuning_params par);
    entry [expedited] void Histogram(CkReductionMsg *msg);
    entry void Done(CkReductionMsg *msg);
    entry void SanityCheck(CkReductionMsg *msg);
  };

  template <class key, class value> array [1D] Bucket {
    entry Bucket(CProxy_Main<key, value> main_proxy, key min, key max);
    entry void StepSort();
    entry void CleanSplitters();
    entry void SetCallback(const CkCallback &cb);
    entry void SetData();
    entry void SetData(data_msg<key, value> *init_data);
    entry void CountFirstProbe(first_probe<key, value>* msg);
    entry [expedited] void CountProbe(next_probe<key> *pb);
    entry void SendPortion(int k, int npd);
    entry [expedited] void SendAll(next_probe<key> *pb);
    entry void Load(data_msg<key, value>* msg);
    entry void Load();
  };
};

